#include <SoftwareSerial.h>
#include <avr/wdt.h>
SoftwareSerial mySerial(8, 9);
int8_t answer;
uint32_t prev_start_sending_millis;
uint32_t start_sending_interval=240000;
bool start_sending=false;
uint32_t prev_command_millis;
uint32_t command_interval=60000;
int open = 13;
int close = 12;
int opened = 4;
int remote = 6;
int closed = 5;
int x;
char data[5];
char message[30];
int n = 0; 

void setup()
{
pinMode(open, OUTPUT); 
pinMode(close, OUTPUT); 
pinMode(opened, INPUT);
pinMode(remote, INPUT);
pinMode(closed, INPUT);
Serial.begin(9600); 
mySerial.begin(2400);    //use 2400 for SIM 900
Serial.println("Starting...");
power_on();
delay(500);
answer = sendATcommand("AT", "OK", 3000); 
if(answer==1)
Serial.println("ok");
delay(500);

answer = sendATcommand("AT+CSQ", "OK", 3000); 
if(answer==1)
Serial.println("good signal quality");
delay(500);

answer = sendATcommand("AT+CCID", "OK", 3000); 
if(answer==1)
Serial.println("SIM is plugged");
delay(500);

answer = sendATcommand("AT+CREG?", "OK", 3000); 
if(answer==1)
Serial.println("Registered to network");
delay(500);


answer = sendATcommand("AT+CNMI=2,2,0,0,0", "OK", 3000); 
if(answer==1)
Serial.println("Received message mode set");
delay(500);

SendMessage();
//delay(500);

}


void loop()
{ 
  
 recvWithStartEndMarkers();
 open_close();
 send_when_open_close();

}

void power_on()
{

    uint8_t answer=0;

    // checks if the module is started
    answer = sendATcommand("AT", "OK", 3000);
    if (answer == 0)
    {
        
        while(answer == 0){     // Send AT every two seconds and wait for the answer
            answer = sendATcommand("AT", "OK", 3000);    
        }
    }
    Serial.println("modem ready");

}

int8_t sendATcommand(char* ATcommand, char* expected_answer, unsigned int timeout){

    uint8_t x=0,  answer=0;
    char response[100];
    unsigned long previous;

    memset(response, '\0', 100);    // Initialice the string

    delay(100);

    while( mySerial.available() > 0) mySerial.read();    // Clean the input buffer
    delay(1000);

    mySerial.println(ATcommand);    // Send the AT command 


    x = 0;
    previous = millis();

    // this loop waits for the answer
    do{
        if(mySerial.available() != 0){    // if there are data in the UART input buffer, reads it and checks for the asnwer
            response[x] = mySerial.read();
            x++;
            if (strstr(response, expected_answer) != NULL)    // check if the desired answer is in the response of the module
            {
                answer = 1;
            }
        }
    }while((answer == 0) && ((millis() - previous) < timeout));    // Waits for the asnwer with time out

    return answer;
}


void SendMessage()
{
    Serial.print("Setting SMS mode...");
    answer=sendATcommand("AT+CMGF=1", "OK", 3000);    // sets the SMS mode to text
    if(answer==1)
    Serial.println("SMS mode set");
    else
    {
    Serial.println("Error setting SMS mode");
    softwareReset( WDTO_60MS);
    }
    Serial.println("Sending SMS");
    answer = sendATcommand("AT+CMGS=\"+917602304567\"\r", ">", 3000);    // send the SMS number
    if (answer == 1)
    {
        mySerial.println("NodeA restarted");
        mySerial.write(0x1A);
        answer = sendATcommand("", "OK", 30000);
        if (answer == 1)
        {
            Serial.println("Initial SMS Sent ");    
        }
        else
        {
            Serial.println("Please check balance");
        }
    }
    else
    {
        Serial.print("error ");
        Serial.println(answer, DEC);
        softwareReset( WDTO_60MS);
    }
}


void SendMessageServer()
{
   
 if(digitalRead(remote))
  data[0]='7';
  else 
  data[0]='6';


  if(digitalRead(opened))
  data[1]='7';
  else 
  data[1]='6';

  if(digitalRead(closed))
  data[2]='7';
  else 
  data[2]='6';

  data[3]='\0';
  
  Serial.print("data= ");
  Serial.println(data);
  sprintf(message,"@actuatorp%sq#",data);
  Serial.print("message= ");
  Serial.println(message);
  Serial.print("Setting SMS mode...");
    answer=sendATcommand("AT+CMGF=1", "OK", 3000);    // sets the SMS mode to text
    if(answer==1)
    Serial.println("SMS mode set");
    else
    {
    Serial.println("Error setting SMS mode");
    softwareReset( WDTO_60MS);
    }
    if(strstr(message, "actuator") != NULL && strstr(message, "p") != NULL && strstr(message, "q")!=NULL)
    {
    Serial.print("Sending");
    Serial.print(message);
    Serial.println(" to server");
    }
    else
    {
    Serial.println("Error in forming message");
    softwareReset( WDTO_60MS);
    }
    answer = sendATcommand("AT+CMGS=\"+917602304567\"\r", ">", 3000);    // send the SMS number
    if (answer == 1)
    {   
        mySerial.println(message);
        mySerial.write(0x1A);
        answer = sendATcommand("", "OK", 30000);
        if (answer == 1)
        {
            Serial.println("sent to server");    
        }
        else
        {
            Serial.println("Please check balance");
        }
        
    }

    else
    {
        Serial.print("error ");
        Serial.println(answer, DEC);
        softwareReset( WDTO_60MS);
    }
    
    
}


void SendMessageMobile()
{
   
 if(digitalRead(remote))
  data[0]='7';
  else 
  data[0]='6';


  if(digitalRead(opened))
  data[1]='7';
  else 
  data[1]='6';

  if(digitalRead(closed))
  data[2]='7';
  else 
  data[2]='6';

  data[3]='\0';
  
  Serial.print("data= ");
  Serial.println(data);
  sprintf(message,"@actuatorp%sq#",data);
  Serial.print("message= ");
  Serial.println(message);
  Serial.print("Setting SMS mode...");
    answer=sendATcommand("AT+CMGF=1", "OK", 3000);    // sets the SMS mode to text
    if(answer==1)
    Serial.println("SMS mode set");
    else
    {
    Serial.println("Error setting SMS mode");
    softwareReset( WDTO_60MS);
    }
    if(strstr(message, "actuator") != NULL && strstr(message, "p") != NULL && strstr(message, "q")!=NULL)
    {
    Serial.print("Sending");
    Serial.print(message);
    Serial.println(" to server");
    }
    else
    {
    Serial.println("Error in forming message");
    softwareReset( WDTO_60MS);
    }
    answer = sendATcommand("AT+CMGS=\"+917602304567\"\r", ">", 3000);    // send the SMS number
    if (answer == 1)
    {   
        mySerial.println(message);
        mySerial.write(0x1A);
        answer = sendATcommand("", "OK", 30000);
        if (answer == 1)
        {
            Serial.println("sent to server");    
        }
        else
        {
            Serial.println("Please check balance");
        }
        
    }

    else
    {
        Serial.print("error ");
        Serial.println(answer, DEC);
        softwareReset( WDTO_60MS);
    }
    
    
    
}



void recvWithStartEndMarkers() 
{
const byte numChars = 100;
char receivedChars[numChars];
char message[numChars];
boolean newData = false;


    static boolean recvInProgress = false;
    static byte ndx = 0;
    char startMarker = '@';
    char endMarker = '#';
    char rc;
    int c;
 
    while (mySerial.available() > 0 && newData == false) 
    {
        rc = mySerial.read();

        if (recvInProgress == true) 
        {
            if (rc != endMarker) 
            {
                receivedChars[ndx] = rc;
                ndx++;
                if (ndx >= numChars) 
                {
                    ndx = numChars - 1;
                }
            }
            else 
            {
                receivedChars[ndx] = '\0'; // terminate the string
                c=ndx;
                recvInProgress = false;
                ndx = 0;
                newData = true;
            }
        }

        else if (rc == startMarker) 
        {
            recvInProgress = true;
        }
    }


if (newData == true) 

    {       
        if(strstr(receivedChars, "mobile")!=NULL && start_sending==false)
        { 
        Serial.print(c);         
        Serial.println(receivedChars);
        SendMessageServer();
        delete_sms();
        newData = false;
        
        }

        else if(strstr(receivedChars, "delete")!=NULL)
        {
        Serial.print(c);
        Serial.println(receivedChars);
        delete_sms();
        newData = false;
        }
        

       else if(strstr(receivedChars, "open")!=NULL)
        {
        Serial.print(c);
        Serial.println(receivedChars);
        x=1;
        start_sending=true;
        prev_start_sending_millis=millis();
        newData = false;
        }

        else if(strstr(receivedChars, "close")!=NULL)
        {
        Serial.print(c);
        Serial.println(receivedChars);
        x=2;
        start_sending=true;
        prev_start_sending_millis=millis();
        newData = false;
        }

        else
        {
          Serial.println("Non-sense data found, I am restarting");
          softwareReset( WDTO_60MS);
        
        }
    }

}

void delete_sms()

{
answer = sendATcommand("AT+CMGD=1,4", "OK", 3000); 
if(answer==1)
Serial.println("All message deleted");
else
{
Serial.println("Cant delete");
softwareReset( WDTO_60MS);
}
}

void softwareReset( uint8_t prescaller) 
{

  wdt_enable( prescaller);
  
  while(1) {}
}


void open_close()
{

 if(!digitalRead(opened) && digitalRead(remote))
  {
  if(x==1)
 {
  digitalWrite(close, LOW);
  delay(5);
  digitalWrite(open, HIGH);
  x=0;

}
  }
else
digitalWrite(open, LOW);



 if(!digitalRead(closed) && digitalRead(remote))
  {
  if(x==2)
 {
   digitalWrite(open, LOW);
   delay(5);
   digitalWrite(close, HIGH);
   x=0;

}
  }
else
digitalWrite(close, LOW);

}

void send_when_open_close()
{

if(millis() -prev_start_sending_millis > start_sending_interval)
start_sending=false;
if(start_sending && millis() -prev_command_millis > command_interval)
{
SendMessageServer();
delete_sms();
prev_command_millis=millis();
}

}
