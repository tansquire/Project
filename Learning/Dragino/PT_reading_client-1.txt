#include <SPI.h>
#include <avr/wdt.h>
#include <RH_RF95.h>

int analogPin = 3;     
int n = 0; 

// Singleton instance of the radio driver
RH_RF95 rf95;
float frequency = 434.0;

void setup() 
{
  Serial.begin(9600);
  //while (!Serial) ; // Wait for serial port to be available
  Serial.println("Start LoRa Client");
  if (!rf95.init())
    Serial.println("init failed");
  // Setup ISM frequency
  rf95.setFrequency(frequency);
  // Setup Power,dBm
  rf95.setTxPower(13);

  // Setup Spreading Factor (6 ~ 12)
  rf95.setSpreadingFactor(7);
  
  // Setup BandWidth, option: 7800,10400,15600,20800,31200,41700,62500,125000,250000,500000
  //Lower BandWidth for longer distance.
  rf95.setSignalBandwidth(125000);
  
  // Setup Coding Rate:5(4/5),6(4/6),7(4/7),8(4/8) 
  rf95.setCodingRate4(5);
}

void loop()
{

    uint8_t data[50];
    char value[10];
    char count[5];
    int i = 0;
    int n;
    unsigned int n1;
    bool isNeg;
    
  Serial.println("Sending to LoRa Server");
  // Send a message to LoRa Server
 //convert analog value into string     
   n=analogRead(analogPin); 
   isNeg = n<0;
   n1 = isNeg ? -n : n;
   while(n1!=0)
   {
    value[i++] = n1%10+'0';
    n1=n1/10;
    }

    if(isNeg)
    value[i++] = '-';
    value[i] = '\0';

   for(int t = 0; t < i/2; t++)
  {
    value[t] ^= value[i-t-1];
    value[i-t-1] ^= value[t];
    value[t] ^= value[i-t-1];
  }

if(n == 0)
{
    value[0] = '0';
    value[1] = '\0';
}   

    sprintf(data,"@deviceD<%s>p#",value);
    if(strstr(data, "deviceD") != NULL && strstr(data, "p") != NULL && strstr(data, "<") != NULL && strstr(data, ">") != NULL)
    {
    Serial.print("Sending");
//    Serial.print(data);
    Serial.println(" to server");
    rf95.send(data, sizeof(data));
    rf95.waitPacketSent();
    }
    else
    {
    Serial.println("Error in forming message");
    softwareReset( WDTO_60MS);
    }

// Now wait for a reply
  uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
  uint8_t len = sizeof(buf);

  if (rf95.waitAvailableTimeout(3000))
  { 
    // Should be a reply message for us now   
    if (rf95.recv(buf, &len))
   {
      Serial.print("got reply: ");
      Serial.println((char*)buf);
      Serial.print("RSSI: ");
      Serial.println(rf95.lastRssi(), DEC);    
    }
    else
    {
      Serial.println("recv failed");
    }
  }
  else
  {
    Serial.println("No reply, is LoRa server running?");
  }
  delay(5000);
}

void softwareReset( uint8_t prescaller) 
{

  wdt_enable( prescaller);
  
  while(1) {}
}