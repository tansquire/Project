//Try to change String class by cstring
#include <SoftwareSerial.h>
SoftwareSerial mySerial(9, 10);
int8_t answer;

void setup(){

    
    Serial.begin(9600); 
    mySerial.begin(9600);    

    Serial.println("Starting...");
    power_on();

answer = sendATcommand("AT", "OK", 2000); 
if(answer==1)
Serial.println("ok");

answer = sendATcommand("AT+CSQ", "OK", 2000); 
if(answer==1)
Serial.println("good signal quality");

answer = sendATcommand("AT+CCID", "OK", 2000); 
if(answer==1)
Serial.println("SIM is plugged");

answer = sendATcommand("AT+CREG?", "OK", 2000); 
if(answer==1)
Serial.println("Registered to network");


answer = sendATcommand("AT+CNMI=2,2,0,0,0", "OK", 2000); 
if(answer==1)
Serial.println("Received message mode set");



    Serial.print("Setting SMS mode...");
    sendATcommand("AT+CMGF=1", "OK", 1000);    // sets the SMS mode to text
    Serial.println("Sending SMS");

    //mySerial.println("AT+CMGS=\"+917602304567\"\r");
    answer = sendATcommand("AT+CMGS=\"+917602304567\"\r", ">", 2000);    // send the SMS number
    if (answer == 1)
    {
        mySerial.println("Test-Arduino-Hello World");
        mySerial.write(0x1A);
        answer = sendATcommand("", "OK", 20000);
        if (answer == 1)
        {
            Serial.print("Sent ");    
        }
        else
        {
            Serial.print("error ");
        }
    }
    else
    {
        Serial.print("error ");
        Serial.println(answer, DEC);
    }

}


void loop()
{ 
 sms_task1();
 lora();
 
}

void power_on(){

    uint8_t answer=0;

    // checks if the module is started
    answer = sendATcommand("AT", "OK", 2000);
    if (answer == 0)
    {
        
        while(answer == 0){     // Send AT every two seconds and wait for the answer
            answer = sendATcommand("AT", "OK", 2000);    
        }
    }
    Serial.println("modem ready");

}

int8_t sendATcommand(char* ATcommand, char* expected_answer, unsigned int timeout){

    uint8_t x=0,  answer=0;
    char response[100];
    unsigned long previous;

    memset(response, '\0', 100);    // Initialice the string

    delay(100);

    while( mySerial.available() > 0) mySerial.read();    // Clean the input buffer

    mySerial.println(ATcommand);    // Send the AT command 


    x = 0;
    previous = millis();

    // this loop waits for the answer
    do{
        if(mySerial.available() != 0){    // if there are data in the UART input buffer, reads it and checks for the asnwer
            response[x] = mySerial.read();
            x++;
            if (strstr(response, expected_answer) != NULL)    // check if the desired answer is in the response of the module
            {
                answer = 1;
            }
        }
    }while((answer == 0) && ((millis() - previous) < timeout));    // Waits for the asnwer with time out

    return answer;
}

void smstask()
{
  String str="";
while( mySerial.available() > 0) mySerial.read();   //If you dont use this line, still working
if(mySerial.available()) 
{
str=mySerial.readString();
Serial.println(str);
int bra = str.indexOf('@');
int ket = str.indexOf('#');
String str1=str.substring(bra+1,ket);

if(str1=="server")
{
int i=random(1,500);
String str2=(String)i;
String str3="@deviceA#"+str2;


    sendATcommand("AT+CMGF=1", "OK", 1000);    // sets the SMS mode to text
    
    answer = sendATcommand("AT+CMGS=\"+917602304567\"\r", ">", 2000);    // send the SMS number
    if (answer == 1)
    {
        mySerial.println(str3);
        mySerial.write(0x1A);
        answer = sendATcommand("", "OK", 20000);
        if (answer == 1)
        {
            Serial.println("Sent ");    
        }
        else
        {
            Serial.print("message sending error ");
        }
    }


answer = sendATcommand("AT+CMGD=1,4", "OK", 2000); 
if(answer==1)
Serial.println("deleted");
}
}
  
  
}

void wait(unsigned int timeout)   //It works for  timeout time.
{
uint8_t x=0;  
unsigned long previous;
while( mySerial.available() > 0) mySerial.read();    // Clean the input buffer//If you dont use this line, still working
previous = millis();
do{
       sms_task1();
            
  }
    
   while(((millis() - previous) < timeout));   

}

void lora()
{
int m,n;

 wait(10000);            
 Serial.println("I am working other job");
 for(int j=0;j<100;j++)
 for(int k=0;k<100;k++)
 int m=k*j;


 wait(10000);            
 for(int j=0;j<100;j++)
 for(int k=0;k<100;k++)
  m=k*j;


 wait(10000);            
 for(int j=0;j<100;j++)
 for(int k=0;k<100;k++)
 m=k*j;

 
 wait(10000);            
 for(int j=0;j<100;j++)
 for(int k=0;k<100;k++)
 m=k+j;
 
 
 Serial.println("I am working other job");
}





void sms_task1()
{
int y;
const byte numChars = 100;
char receivedChars[numChars]; // an array to store the received data
boolean newData = false;
char message[50];

 static byte ndx = 0;
 char endMarker = '#';
 char rc;
 
//if (mySerial.available() > 0) 
//{
while (mySerial.available() > 0 && newData == false) 
{
 rc = mySerial.read();

 if (rc != endMarker) 
 {
 receivedChars[ndx] = rc;
 ndx++;
 if (ndx >= numChars)
 {
 ndx = numChars - 1;
 }
 }
 else 
 {
 receivedChars[ndx] = '\0'; // terminate the string
 ndx = 0;
 newData = true;
 }
 }
//}


 if (newData == true) 
 {
 Serial.println(receivedChars);
 newData = false;
 if (strstr(receivedChars, "partha") != NULL)   
 {

{
int i=random(1,500);
y=sprintf(message,"%s#%d","@deviceA",i);


    sendATcommand("AT+CMGF=1", "OK", 1000);    // sets the SMS mode to text
    
    answer = sendATcommand("AT+CMGS=\"+919940323276\"\r", ">", 2000);    // send the SMS number
    if (answer == 1)
    {
        mySerial.println(message);
        mySerial.write(0x1A);
        answer = sendATcommand("", "OK", 20000);
        if (answer == 1)
        {
            Serial.println("Sent ");    
        }
        else
        {
            Serial.print("message sending error ");
        }
    }


answer = sendATcommand("AT+CMGD=1,4", "OK", 2000); 
if(answer==1)
Serial.println("deleted");
}



  
                    
 }
 
 }

}




















