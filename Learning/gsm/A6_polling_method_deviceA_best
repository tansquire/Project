#include <SoftwareSerial.h>
SoftwareSerial mySerial(9, 10);
int8_t answer;
int count_sent_A=0;
uint32_t prev_delete_millis;
uint32_t delete_interval=30000000;
uint32_t prev_power_millis;
uint32_t power_interval=3558000; 


void setup()
{
Serial.begin(9600); 
mySerial.begin(9600);    
Serial.println("Starting...");
power_on();
delay(500);

answer = sendATcommand("AT", "OK", 2000); 
if(answer==1)
Serial.println("ok");
delay(500);

answer = sendATcommand("AT+CSQ", "OK", 2000); 
if(answer==1)
Serial.println("good signal quality");
delay(500);

answer = sendATcommand("AT+CCID", "OK", 2000); 
if(answer==1)
Serial.println("SIM is plugged");
delay(500);

answer = sendATcommand("AT+CREG?", "OK", 2000); 
if(answer==1)
Serial.println("Registered to network");
delay(500);


answer = sendATcommand("AT+CNMI=2,2,0,0,0", "OK", 2000); 
if(answer==1)
Serial.println("Received message mode set");
delay(500);

SendMessage();
delay(500);

}


void loop()
{ 
 sms_task();
 //lora();


//if(millis() -prev_power_millis > power_interval)
//{
//power_on();
//prev_power_millis=millis();
//}
 
}

void power_on()
{

    uint8_t answer=0;

    // checks if the module is started
    answer = sendATcommand("AT", "OK", 2000);
    if (answer == 0)
    {
        
        while(answer == 0){     // Send AT every two seconds and wait for the answer
            answer = sendATcommand("AT", "OK", 2000);    
        }
    }
    Serial.println("modem ready");

}

int8_t sendATcommand(char* ATcommand, char* expected_answer, unsigned int timeout){

    uint8_t x=0,  answer=0;
    char response[100];
    unsigned long previous;

    memset(response, '\0', 100);    // Initialice the string

    delay(100);

    while( mySerial.available() > 0) mySerial.read();    // Clean the input buffer

    mySerial.println(ATcommand);    // Send the AT command 


    x = 0;
    previous = millis();

    // this loop waits for the answer
    do{
        if(mySerial.available() != 0){    // if there are data in the UART input buffer, reads it and checks for the asnwer
            response[x] = mySerial.read();
            x++;
            if (strstr(response, expected_answer) != NULL)    // check if the desired answer is in the response of the module
            {
                answer = 1;
            }
        }
    }while((answer == 0) && ((millis() - previous) < timeout));    // Waits for the asnwer with time out

    return answer;
}



//void wait(unsigned int timeout)   //It works for  timeout time.
//{
//uint8_t x=0;  
//unsigned long previous;
//while( mySerial.available() > 0) mySerial.read();    // Clean the input buffer//If you dont use this line, still working
//previous = millis();
//do{
//       sms_task();
//            
//  }
//    
//   while(((millis() - previous) < timeout));   
//
//}

//void lora()
//{
//int m,n;
//
// wait(10000);            
// Serial.println("I am working other job");
// for(int j=0;j<100;j++)
// for(int k=0;k<100;k++)
// int m=k*j;
//
//
// wait(10000);            
// for(int j=0;j<100;j++)
// for(int k=0;k<100;k++)
//  m=k*j;
//
//
// wait(10000);            
// for(int j=0;j<100;j++)
// for(int k=0;k<100;k++)
// m=k*j;
//
// 
// wait(10000);            
// for(int j=0;j<100;j++)
// for(int k=0;k<100;k++)
// m=k+j;
// 
// 
// Serial.println("I am working other job");
//}







void SendMessage()
{
  Serial.print("Setting SMS mode...");
    answer=sendATcommand("AT+CMGF=1", "OK", 1000);    // sets the SMS mode to text
    if(answer==1)
    Serial.println("SMS mode set");
    else
    Serial.println("Error setting SMS mode");
    Serial.println("Sending SMS");
    answer = sendATcommand("AT+CMGS=\"+917602304567\"\r", ">", 2000);    // send the SMS number
    if (answer == 1)
    {
        mySerial.println("Test sms-Sketch is ready to run");
        mySerial.write(0x1A);
        answer = sendATcommand("", "OK", 20000);
        if (answer == 1)
        {
            Serial.println("Initial SMS Sent ");    
        }
        else
        {
            Serial.println("Error in sending initial sms--Please check balance");
        }
    }
    else
    {
        Serial.print("error ");
        Serial.println(answer, DEC);
    }
}


void SendMessageA()
{
    char message[100];
    answer=sendATcommand("AT+CMGF=1", "OK", 1000);    // sets the SMS mode to text
    Serial.println("Sending SMS to device A");
    answer = sendATcommand("AT+CMGS=\"+919940323276\"\r", ">", 2000);    // send the SMS number
    if (answer == 1)
    {   int i=random(1,5000);
        //float f=i/1000;
        count_sent_A++;
        sprintf(message,"@%s|%d|<%d>#","deviceA",i,count_sent_A);
        mySerial.println(message);
        mySerial.write(0x1A);
        answer = sendATcommand("", "OK", 20000);
        if (answer == 1)
        {
            Serial.println("sent");    
        }
        else
        {
            Serial.println("Error in sending initial sms--Please check balance");
        }
        
    }

    else
    {
        Serial.print("error ");
        Serial.println(answer, DEC);
    }
    
    
}






void sms_task() 
{
const byte numChars = 100;
char receivedChars[numChars];
boolean newData = false;


    static boolean recvInProgress = false;
    static byte ndx = 0;
    char startMarker = '@';
    char endMarker = '#';
    char rc;
 
    while (mySerial.available() > 0 && newData == false) 
    {
        rc = mySerial.read();

        if (recvInProgress == true) 
        {
            if (rc != endMarker) 
            {
                receivedChars[ndx] = rc;
                ndx++;
                if (ndx >= numChars) 
                {
                    ndx = numChars - 1;
                }
            }
            else 
            {
                receivedChars[ndx] = '\0'; // terminate the string
                recvInProgress = false;
                ndx = 0;
                newData = true;
            }
        }

        else if (rc == startMarker) 
        {
            recvInProgress = true;
        }
    }


if (newData == true) 
    {
        
        
        if(strstr(receivedChars, "start") != NULL)
        {
        Serial.println(receivedChars);
        SendMessageA();
        //delay(1000);
        delete_sms();
        newData = false;
        }

        else
        {
        newData = false;
        return;
        }
    }

}

void delete_sms()

{
answer = sendATcommand("AT+CMGD=1,4", "OK", 2000); 
if(answer==1)
Serial.println("All message deleted");
else
Serial.println("Cant delete");
}

