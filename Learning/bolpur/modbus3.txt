import time
import mysql.connector
from pymodbus.client.sync import ModbusSerialClient as ModbusClient
from pymodbus.register_read_message import ReadHoldingRegistersResponse
s=[]
dev=[]
def Average(lst):
 return sum(lst) / len(lst)

def Import(s,dev,x):
    try:
        conn = mysql.connector.connect(user='root', password='123456', host ='192.168.1.100', database='scanner')
        if conn.is_connected():
            print('Connected to MySQL database')
            mycursor = conn.cursor()
            mycursor.execute("update temperature2 set t1 = '%s',t2 = '%s',t3 = '%s',t4 = '%s',t5 = '%s',t6 = '%s',t7 = '%s', t8 = '%s', t9 = '%s',t10 = '%s',t11 = '%s',t12 = '%s',t13 = '%s', t14 = '%s', t15 = '%s',avg = '%s', dev1 = '%s',dev2 = '%s',dev3 = '%s',dev4 = '%s',dev5 = '%s',dev6 = '%s' where id =1" %(s[0]/10,s[1]/10, s[2]/10, s[3]/10, s[4]/10,s[5]/10,s[6]/10,s[7]/10,s[8]/10,s[9]/10,s[10]/10,s[11]/10,s[12]/10, s[13]/10, s[14]/10, x, dev[0]/10,dev[1]/10,dev[2]/10,dev[3]/10,dev[4]/10,dev[5]/10))
            #print(Average (cylinder))
            conn.commit()
            
 
    except:
        print("MySQL connection lost")
        client = ModbusClient(method='rtu', port='/dev/ttyUSB0', stopbits=1, timeout=5.0, bytesize=8, parity='N', baudrate='9600')
        connection=client.connect()
 	value=client.read_holding_registers(0,15,unit=1)
        if(value is not None):
            print('Data available from scannar')
            cylinder = (value.registers[0],value.registers[1],value.registers[2],value.registers[3],value.registers[4],value.registers[5])
  	    y=Average (cylinder)
            dev = (value.registers[0]-y,value.registers[1]-y,value.registers[2]-y,value.registers[3]-y,value.registers[4]-y,value.registers[5]-y)
            print(value.registers)
 
    finally:
        conn.close()
	mycursor.close()

    return 




while (1):
 
    try:
        client = ModbusClient(method='rtu', port='/dev/ttyUSB0', stopbits=1, timeout=2.0, bytesize=8, parity='N', baudrate='9600')
        connection=client.connect()
 	value=client.read_holding_registers(0,15,unit=1)
        if(value is not None):
            print('Data available from scannar')
            cylinder = (value.registers[0],value.registers[1],value.registers[2],value.registers[3],value.registers[4],value.registers[5])
  	    y=Average (cylinder)
            dev = (value.registers[0]-y,value.registers[1]-y,value.registers[2]-y,value.registers[3]-y,value.registers[4]-y,value.registers[5]-y)
            print(value.registers)
            Import(value.registers,dev,y)
            
 
    except:
        print("No data coming from scannar")
 
    finally:
        client.close()
	

    time.sleep(0.25)



